// app\index.tsx - TEST VOICE RECORDER
import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, StyleSheet, Alert, TouchableOpacity, Linking } from 'react-native';
import VoiceRecorderDemo from '../../src/components/VoiceRecorderDemo';
import VoiceRecorder from '../../src/components/VoiceRecorder';
import { getTransactions, getUnsyncedTransactions, clearTransactions, saveTransaction } from '../../src/utils/storage';
import { syncToBackend, isOnline } from '../../src/utils/syncService';
import { parseTranscript } from '../../src/utils/api';

export default function HomeScreen() {
  const [messages, setMessages] = useState<string[]>([]);
  const [transactions, setTransactions] = useState<any[]>([]);
  const [unsyncedCount, setUnsyncedCount] = useState(0);
  const [isOnlineStatus, setIsOnlineStatus] = useState(false);
  const [isSyncing, setIsSyncing] = useState(false);
  const [useRealRecording, setUseRealRecording] = useState(false);

  // Load transactions on app start
  useEffect(() => {
    loadTransactions();
    checkOnlineStatus();
  }, []);

  const loadTransactions = async () => {
    try {
      const allTransactions = await getTransactions();
      const unsynced = await getUnsyncedTransactions();
      setTransactions(allTransactions.slice(0, 5)); // Show last 5
      setUnsyncedCount(unsynced.length);
    } catch (error) {
      console.error('Error loading transactions:', error);
    }
  };

  const checkOnlineStatus = async () => {
    const online = await isOnline();
    setIsOnlineStatus(online || false); // Handle null case
  };

  const handleTranscriptReceived = async (transcript: string) => {
    setMessages(prev => [transcript, ...prev]);

    // If using real recording, process the transcript
    if (useRealRecording) {
      try {
        console.log('Received transcript:', transcript);

        // Send to backend for parsing
        const parsedData = await parseTranscript(transcript);
        console.log('Parsed data:', parsedData);

        // Save locally
        const transaction = {
          ...parsedData,
          id: Date.now().toString(),
          timestamp: new Date().toISOString(),
          synced: false,
        };

        await saveTransaction(transaction);
        await loadTransactions(); // Refresh the list

        Alert.alert('Success', 'Transaction saved!');
      } catch (error) {
        console.error('Error processing transcript:', error);
        Alert.alert('Error', 'Failed to process transaction. Please try again.');
      }
    }
  };

  const handleTransactionSaved = (transaction: any) => {
    setTransactions(prev => [transaction, ...prev.slice(0, 4)]); // Keep only 5
    setUnsyncedCount(prev => prev + 1);
    Alert.alert(
      '💰 Transaction Saved!',
      `${transaction.type === 'income' ? 'Income' : 'Expense'}: ₦${transaction.amount.toLocaleString()}\n${transaction.description}`
    );
  };

  const handleSyncNow = async () => {
    if (!isOnlineStatus) {
      Alert.alert('Offline', 'Please check your internet connection');
      return;
    }

    if (unsyncedCount === 0) {
      Alert.alert('All Synced', 'All transactions are already synced');
      return;
    }

    setIsSyncing(true);
    try {
      const result = await syncToBackend();
      if (result.success) {
        setUnsyncedCount(0);
        Alert.alert('Sync Complete', `${result.synced} transactions synced successfully`);
      } else {
        Alert.alert('Sync Failed', result.error || 'Unknown error');
      }
    } catch (error) {
      Alert.alert('Sync Error', 'Failed to sync transactions');
    } finally {
      setIsSyncing(false);
    }
  };

  const shareToWhatsApp = async () => {
    try {
      const allTransactions = await getTransactions();

      if (allTransactions.length === 0) {
        Alert.alert('No Transactions', 'Generate some transactions first to share.');
        return;
      }

      // Calculate summary
      const income = allTransactions
        .filter((tx: any) => tx.type === 'income')
        .reduce((sum: number, tx: any) => sum + tx.amount, 0);

      const expense = allTransactions
        .filter((tx: any) => tx.type === 'expense')
        .reduce((sum: number, tx: any) => sum + tx.amount, 0);

      const profit = income - expense;

      // Build WhatsApp message
      const summary = `💰 *CashFlow Summary*\n\n` +
        `📈 Income: ₦${income.toLocaleString()}\n` +
        `📉 Expenses: ₦${expense.toLocaleString()}\n` +
        `💵 Profit: ₦${profit.toLocaleString()}\n\n` +
        `📊 Total Transactions: ${allTransactions.length}\n\n` +
        `Recent transactions:\n` +
        allTransactions.slice(0, 5).map((tx: any, i: number) =>
          `${i + 1}. ${tx.type === 'income' ? '💚' : '💸'} ${tx.description} - ₦${tx.amount.toLocaleString()}`
        ).join('\n') +
        `\n\n_Generated by CashFlow App_ 📱`;

      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(summary)}`;

      const supported = await Linking.canOpenURL(whatsappUrl);
      if (supported) {
        await Linking.openURL(whatsappUrl);
      } else {
        Alert.alert('WhatsApp Not Found', 'WhatsApp is not installed on this device.');
      }
    } catch (error) {
      console.error('WhatsApp share error:', error);
      Alert.alert('Share Failed', 'Could not share to WhatsApp. Please try again.');
    }
  };

  const loadDemoTransactions = async () => {
    const demoData = [
      { transcript: "I sold shoes for 15k", type: "income", amount: 15000, description: "shoes" },
      { transcript: "I bought rice for 20k", type: "expense", amount: 20000, description: "rice" },
      { transcript: "I received payment for 50k", type: "income", amount: 50000, description: "payment" },
      { transcript: "I paid rent for 100k", type: "expense", amount: 100000, description: "rent" },
      { transcript: "I sold my phone for 80k", type: "income", amount: 80000, description: "my phone" }
    ];

    try {
      for (const demo of demoData) {
        const transaction = {
          id: Date.now().toString() + Math.random(),
          type: demo.type,
          amount: demo.amount,
          description: demo.description,
          timestamp: new Date().toISOString(),
          synced: false,
          originalTranscript: demo.transcript
        };

        await saveTransaction(transaction);
        setTransactions(prev => [transaction, ...prev.slice(0, 4)]);
        handleTranscriptReceived(demo.transcript);

        // Small delay between transactions
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      setUnsyncedCount(prev => prev + demoData.length);

      Alert.alert(
        '🎭 Demo Data Loaded!',
        `${demoData.length} sample transactions added for demonstration purposes.`,
        [{ text: 'OK' }]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to load demo data.');
    }
  };

  const handleClearTransactions = async () => {
    Alert.alert(
      '🗑️ Clear Transactions',
      'What would you like to clear?',
      [
        {
          text: 'Cancel',
          style: 'cancel'
        },
        {
          text: 'Clear Last 5',
          onPress: async () => {
            try {
              const allTransactions = await getTransactions();
              const remainingTransactions = allTransactions.slice(5); // Keep all except first 5

              // Clear all and re-save the remaining
              await clearTransactions();
              for (const tx of remainingTransactions.reverse()) {
                await saveTransaction(tx);
              }

              // Update UI
              await loadTransactions();
              Alert.alert('✅ Cleared', 'Last 5 transactions have been deleted');
            } catch (error) {
              Alert.alert('Error', 'Failed to clear transactions');
            }
          }
        },
        {
          text: 'Clear All',
          style: 'destructive',
          onPress: async () => {
            try {
              await clearTransactions();
              setTransactions([]);
              setUnsyncedCount(0);
              Alert.alert('✅ Cleared', 'All transactions have been deleted');
            } catch (error) {
              Alert.alert('Error', 'Failed to clear transactions');
            }
          }
        }
      ]
    );
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>CashFlow 💰</Text>
        <Text style={styles.subtitle}>Voice-Powered Expense Tracker</Text>
      </View>

      {/* Recording Mode Toggle */}
      <View style={styles.toggleSection}>
        <Text style={styles.toggleLabel}>Recording Mode:</Text>
        <View style={styles.toggleButtons}>
          <TouchableOpacity
            style={[styles.toggleButton, !useRealRecording && styles.toggleButtonActive]}
            onPress={() => setUseRealRecording(false)}
          >
            <Text style={[styles.toggleButtonText, !useRealRecording && styles.toggleButtonTextActive]}>
              🎭 Demo
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.toggleButton, useRealRecording && styles.toggleButtonActive]}
            onPress={() => setUseRealRecording(true)}
          >
            <Text style={[styles.toggleButtonText, useRealRecording && styles.toggleButtonTextActive]}>
              🎤 Real
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Voice Recorder */}
      {useRealRecording ? (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Voice Recording (Whisper AI)</Text>
          <VoiceRecorder
            useRealRecording={true}
            onTranscriptReceived={handleTranscriptReceived}
            onTransactionSaved={handleTransactionSaved}
          />
        </View>
      ) : (
        <VoiceRecorderDemo
          onTranscriptReceived={handleTranscriptReceived}
          onTransactionSaved={handleTransactionSaved}
        />
      )}

      {/* Quick Summary */}
      {transactions.length > 0 && (
        <View style={styles.quickSummary}>
          <Text style={styles.summaryTitle}>Quick Summary</Text>
          <View style={styles.summaryRow}>
            <View style={styles.summaryItem}>
              <Text style={styles.summaryLabel}>Income</Text>
              <Text style={styles.summaryValue}>
                ₦{transactions.filter((tx: any) => tx.type === 'income').reduce((sum: number, tx: any) => sum + tx.amount, 0).toLocaleString()}
              </Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={styles.summaryLabel}>Expenses</Text>
              <Text style={styles.summaryValue}>
                ₦{transactions.filter((tx: any) => tx.type === 'expense').reduce((sum: number, tx: any) => sum + tx.amount, 0).toLocaleString()}
              </Text>
            </View>
          </View>
        </View>
      )}

      {/* Sync Status & Buttons */}
      <View style={styles.syncSection}>
        <View style={styles.syncStatus}>
          <Text style={styles.syncStatusText}>
            {isOnlineStatus ? '🟢 Online' : '🔴 Offline'} • {unsyncedCount} unsynced
          </Text>
        </View>
        <View style={styles.buttonRow}>
          <TouchableOpacity
            style={[styles.syncButton, (!isOnlineStatus || unsyncedCount === 0) && styles.syncButtonDisabled]}
            onPress={handleSyncNow}
            disabled={!isOnlineStatus || unsyncedCount === 0 || isSyncing}
          >
            <Text style={styles.syncButtonText}>
              {isSyncing ? '🔄 Syncing...' : '☁️ Sync'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.whatsappButton, transactions.length === 0 && styles.whatsappButtonDisabled]}
            onPress={shareToWhatsApp}
            disabled={transactions.length === 0}
          >
            <Text style={styles.whatsappButtonText}>
              📱 Share
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.clearButton, transactions.length === 0 && styles.clearButtonDisabled]}
            onPress={handleClearTransactions}
            disabled={transactions.length === 0}
          >
            <Text style={styles.clearButtonText}>
              🗑️ Clear
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Recent Transactions:</Text>
        {transactions.map((tx, index) => (
          <View key={index} style={[styles.messageItem, tx.type === 'income' ? styles.incomeItem : styles.expenseItem]}>
            <Text style={styles.transactionAmount}>
              {tx.type === 'income' ? '+' : '-'}₦{tx.amount.toLocaleString()}
            </Text>
            <Text style={styles.transactionDescription}>{tx.description}</Text>
            <Text style={styles.transactionTime}>
              {new Date(tx.timestamp).toLocaleTimeString()}
            </Text>
          </View>
        ))}
        {transactions.length === 0 && (
          <Text style={styles.noMessages}>
            No transactions yet.{'\n'}Try saying: "Sold shoes 15k" or "Bought rice 20k"
          </Text>
        )}
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Voice Commands:</Text>
        {messages.map((msg, index) => (
          <View key={index} style={styles.messageItem}>
            <Text style={styles.messageText}>🎯 {msg}</Text>
          </View>
        ))}
      </View>

      {/* Demo Mode Button */}
      <View style={styles.demoSection}>
        <TouchableOpacity
          style={styles.demoButton}
          onPress={loadDemoTransactions}
        >
          <Text style={styles.demoButtonText}>
            🎭 Load Sample Data
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.instructions}>
        <Text style={styles.instructionsTitle}>How to use:</Text>
        <Text style={styles.instruction}>1. Tap the microphone button</Text>
        <Text style={styles.instruction}>2. Speak your transaction clearly</Text>
        <Text style={styles.instruction}>3. See it appear automatically!</Text>
        <Text style={styles.instruction}>4. Perfect for busy entrepreneurs on the go! 🚀</Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    backgroundColor: '#007AFF',
    padding: 30,
    alignItems: 'center',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 8,
    letterSpacing: 1,
  },
  subtitle: {
    fontSize: 18,
    color: 'white',
    opacity: 0.95,
    fontWeight: '500',
  },
  section: {
    backgroundColor: 'white',
    margin: 15,
    padding: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 4,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
    textAlign: 'center',
  },
  messageItem: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  incomeItem: {
    borderLeftColor: '#28a745',
    backgroundColor: '#f8fff9',
  },
  expenseItem: {
    borderLeftColor: '#dc3545',
    backgroundColor: '#fff8f8',
  },
  messageText: {
    fontSize: 14,
    color: '#333',
  },
  transactionAmount: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  transactionDescription: {
    fontSize: 15,
    color: '#555',
    marginTop: 4,
    fontWeight: '500',
  },
  transactionTime: {
    fontSize: 11,
    color: '#999',
    marginTop: 6,
    fontStyle: 'italic',
  },
  noMessages: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    padding: 20,
    lineHeight: 20,
  },
  instructions: {
    backgroundColor: '#e7f3ff',
    margin: 15,
    padding: 20,
    borderRadius: 10,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  instructionsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#007AFF',
  },
  instruction: {
    fontSize: 14,
    color: '#333',
    marginBottom: 5,
  },
  syncSection: {
    backgroundColor: 'white',
    margin: 15,
    padding: 15,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  syncStatus: {
    marginBottom: 10,
  },
  syncStatusText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 10,
  },
  syncButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    flex: 1,
  },
  syncButtonDisabled: {
    backgroundColor: '#ccc',
  },
  syncButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 12,
    textAlign: 'center',
  },
  whatsappButton: {
    backgroundColor: '#25D366',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    flex: 1,
  },
  whatsappButtonDisabled: {
    backgroundColor: '#ccc',
  },
  whatsappButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 12,
    textAlign: 'center',
  },
  clearButton: {
    backgroundColor: '#dc3545',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    flex: 1,
  },
  clearButtonDisabled: {
    backgroundColor: '#ccc',
  },
  clearButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 12,
    textAlign: 'center',
  },
  demoSection: {
    margin: 15,
    alignItems: 'center',
  },
  demoButton: {
    backgroundColor: '#6f42c1',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    shadowColor: '#6f42c1',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  demoButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
    textAlign: 'center',
  },
  quickSummary: {
    backgroundColor: 'white',
    margin: 15,
    padding: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 4,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 15,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 5,
  },
  summaryValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#007AFF',
  },
  toggleSection: {
    backgroundColor: 'white',
    margin: 15,
    padding: 15,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  toggleLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 10,
  },
  toggleButtons: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 10,
  },
  toggleButton: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    borderWidth: 2,
    borderColor: '#007AFF',
    backgroundColor: 'white',
  },
  toggleButtonActive: {
    backgroundColor: '#007AFF',
  },
  toggleButtonText: {
    color: '#007AFF',
    fontWeight: 'bold',
    fontSize: 14,
  },
  toggleButtonTextActive: {
    color: 'white',
  },
  aiInsightsSection: {
    margin: 15,
    alignItems: 'center',
  },
  aiInsightsButton: {
    backgroundColor: '#6f42c1',
    paddingHorizontal: 25,
    paddingVertical: 15,
    borderRadius: 25,
    shadowColor: '#6f42c1',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
    marginBottom: 10,
  },
  aiInsightsButtonDisabled: {
    backgroundColor: '#ccc',
    shadowColor: '#ccc',
  },
  aiInsightsButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
    textAlign: 'center',
  },
  aiInsightsHint: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
    paddingHorizontal: 20,
  },
});